<?php
/**
 * CreditCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tpaga
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tpaga\Model;

use \ArrayAccess;
/**
 * CreditCard Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Tpaga
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreditCard implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'bin' => 'string',
        'type' => 'string',
        'expiration_month' => 'string',
        'expiration_year' => 'string',
        'card_verification_code' => 'string',
        'card_holder_name' => 'string',
        'last_four' => 'string',
        'customer' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_city' => 'string',
        'address_state' => 'string',
        'address_postal_code' => 'string',
        'address_country' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'bin' => 'bin',
        'type' => 'type',
        'expiration_month' => 'expirationMonth',
        'expiration_year' => 'expirationYear',
        'card_verification_code' => 'cardVerificationCode',
        'card_holder_name' => 'cardHolderName',
        'last_four' => 'lastFour',
        'customer' => 'customer',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'address_city' => 'addressCity',
        'address_state' => 'addressState',
        'address_postal_code' => 'addressPostalCode',
        'address_country' => 'addressCountry'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'bin' => 'setBin',
        'type' => 'setType',
        'expiration_month' => 'setExpirationMonth',
        'expiration_year' => 'setExpirationYear',
        'card_verification_code' => 'setCardVerificationCode',
        'card_holder_name' => 'setCardHolderName',
        'last_four' => 'setLastFour',
        'customer' => 'setCustomer',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_city' => 'setAddressCity',
        'address_state' => 'setAddressState',
        'address_postal_code' => 'setAddressPostalCode',
        'address_country' => 'setAddressCountry'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'bin' => 'getBin',
        'type' => 'getType',
        'expiration_month' => 'getExpirationMonth',
        'expiration_year' => 'getExpirationYear',
        'card_verification_code' => 'getCardVerificationCode',
        'card_holder_name' => 'getCardHolderName',
        'last_four' => 'getLastFour',
        'customer' => 'getCustomer',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_city' => 'getAddressCity',
        'address_state' => 'getAddressState',
        'address_postal_code' => 'getAddressPostalCode',
        'address_country' => 'getAddressCountry'
    );
  
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $bin 
      * @var string
      */
    protected $bin;
    
    /**
      * $type 
      * @var string
      */
    protected $type;
    
    /**
      * $expiration_month 
      * @var string
      */
    protected $expiration_month;
    
    /**
      * $expiration_year 
      * @var string
      */
    protected $expiration_year;
    
    /**
      * $card_verification_code 
      * @var string
      */
    protected $card_verification_code;
    
    /**
      * $card_holder_name 
      * @var string
      */
    protected $card_holder_name;
    
    /**
      * $last_four 
      * @var string
      */
    protected $last_four;
    
    /**
      * $customer 
      * @var string
      */
    protected $customer;
    
    /**
      * $address_line1 
      * @var string
      */
    protected $address_line1;
    
    /**
      * $address_line2 
      * @var string
      */
    protected $address_line2;
    
    /**
      * $address_city 
      * @var string
      */
    protected $address_city;
    
    /**
      * $address_state 
      * @var string
      */
    protected $address_state;
    
    /**
      * $address_postal_code 
      * @var string
      */
    protected $address_postal_code;
    
    /**
      * $address_country 
      * @var string
      */
    protected $address_country;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->bin = $data["bin"];
            $this->type = $data["type"];
            $this->expiration_month = $data["expiration_month"];
            $this->expiration_year = $data["expiration_year"];
            $this->card_verification_code = $data["card_verification_code"];
            $this->card_holder_name = $data["card_holder_name"];
            $this->last_four = $data["last_four"];
            $this->customer = $data["customer"];
            $this->address_line1 = $data["address_line1"];
            $this->address_line2 = $data["address_line2"];
            $this->address_city = $data["address_city"];
            $this->address_state = $data["address_state"];
            $this->address_postal_code = $data["address_postal_code"];
            $this->address_country = $data["address_country"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets bin
     * @return string
     */
    public function getBin()
    {
        return $this->bin;
    }
  
    /**
     * Sets bin
     * @param string $bin 
     * @return $this
     */
    public function setBin($bin)
    {
        
        $this->bin = $bin;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type 
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array("AMEX", "VISA", "MASTERCARD", "DINERS");
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'AMEX', 'VISA', 'MASTERCARD', 'DINERS'");
        }
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets expiration_month
     * @return string
     */
    public function getExpirationMonth()
    {
        return $this->expiration_month;
    }
  
    /**
     * Sets expiration_month
     * @param string $expiration_month 
     * @return $this
     */
    public function setExpirationMonth($expiration_month)
    {
        
        $this->expiration_month = $expiration_month;
        return $this;
    }
    
    /**
     * Gets expiration_year
     * @return string
     */
    public function getExpirationYear()
    {
        return $this->expiration_year;
    }
  
    /**
     * Sets expiration_year
     * @param string $expiration_year 
     * @return $this
     */
    public function setExpirationYear($expiration_year)
    {
        
        $this->expiration_year = $expiration_year;
        return $this;
    }
    
    /**
     * Gets card_verification_code
     * @return string
     */
    public function getCardVerificationCode()
    {
        return $this->card_verification_code;
    }
  
    /**
     * Sets card_verification_code
     * @param string $card_verification_code 
     * @return $this
     */
    public function setCardVerificationCode($card_verification_code)
    {
        
        $this->card_verification_code = $card_verification_code;
        return $this;
    }
    
    /**
     * Gets card_holder_name
     * @return string
     */
    public function getCardHolderName()
    {
        return $this->card_holder_name;
    }
  
    /**
     * Sets card_holder_name
     * @param string $card_holder_name 
     * @return $this
     */
    public function setCardHolderName($card_holder_name)
    {
        
        $this->card_holder_name = $card_holder_name;
        return $this;
    }
    
    /**
     * Gets last_four
     * @return string
     */
    public function getLastFour()
    {
        return $this->last_four;
    }
  
    /**
     * Sets last_four
     * @param string $last_four 
     * @return $this
     */
    public function setLastFour($last_four)
    {
        
        $this->last_four = $last_four;
        return $this;
    }
    
    /**
     * Gets customer
     * @return string
     */
    public function getCustomer()
    {
        return $this->customer;
    }
  
    /**
     * Sets customer
     * @param string $customer 
     * @return $this
     */
    public function setCustomer($customer)
    {
        
        $this->customer = $customer;
        return $this;
    }
    
    /**
     * Gets address_line1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->address_line1;
    }
  
    /**
     * Sets address_line1
     * @param string $address_line1 
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        
        $this->address_line1 = $address_line1;
        return $this;
    }
    
    /**
     * Gets address_line2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->address_line2;
    }
  
    /**
     * Sets address_line2
     * @param string $address_line2 
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        
        $this->address_line2 = $address_line2;
        return $this;
    }
    
    /**
     * Gets address_city
     * @return string
     */
    public function getAddressCity()
    {
        return $this->address_city;
    }
  
    /**
     * Sets address_city
     * @param string $address_city 
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        
        $this->address_city = $address_city;
        return $this;
    }
    
    /**
     * Gets address_state
     * @return string
     */
    public function getAddressState()
    {
        return $this->address_state;
    }
  
    /**
     * Sets address_state
     * @param string $address_state 
     * @return $this
     */
    public function setAddressState($address_state)
    {
        
        $this->address_state = $address_state;
        return $this;
    }
    
    /**
     * Gets address_postal_code
     * @return string
     */
    public function getAddressPostalCode()
    {
        return $this->address_postal_code;
    }
  
    /**
     * Sets address_postal_code
     * @param string $address_postal_code 
     * @return $this
     */
    public function setAddressPostalCode($address_postal_code)
    {
        
        $this->address_postal_code = $address_postal_code;
        return $this;
    }
    
    /**
     * Gets address_country
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->address_country;
    }
  
    /**
     * Sets address_country
     * @param string $address_country 
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        
        $this->address_country = $address_country;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
