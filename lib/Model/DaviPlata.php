<?php
/**
 * DaviPlata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tpaga
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tpaga\Model;

use \ArrayAccess;
/**
 * DaviPlata Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Tpaga
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DaviPlata implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'number' => 'string',
        'document_number' => 'string',
        'document_type' => 'string',
        'last_four' => 'string',
        'customer' => 'string',
        'verified' => 'bool',
        'max_amount' => 'Number'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'number' => 'number',
        'document_number' => 'documentNumber',
        'document_type' => 'documentType',
        'last_four' => 'lastFour',
        'customer' => 'customer',
        'verified' => 'verified',
        'max_amount' => 'maxAmount'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'number' => 'setNumber',
        'document_number' => 'setDocumentNumber',
        'document_type' => 'setDocumentType',
        'last_four' => 'setLastFour',
        'customer' => 'setCustomer',
        'verified' => 'setVerified',
        'max_amount' => 'setMaxAmount'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'number' => 'getNumber',
        'document_number' => 'getDocumentNumber',
        'document_type' => 'getDocumentType',
        'last_four' => 'getLastFour',
        'customer' => 'getCustomer',
        'verified' => 'getVerified',
        'max_amount' => 'getMaxAmount'
    );
  
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $number 
      * @var string
      */
    protected $number;
    
    /**
      * $document_number 
      * @var string
      */
    protected $document_number;
    
    /**
      * $document_type 
      * @var string
      */
    protected $document_type;
    
    /**
      * $last_four 
      * @var string
      */
    protected $last_four;
    
    /**
      * $customer 
      * @var string
      */
    protected $customer;
    
    /**
      * $verified 
      * @var bool
      */
    protected $verified;
    
    /**
      * $max_amount 
      * @var Number
      */
    protected $max_amount;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->number = $data["number"];
            $this->document_number = $data["document_number"];
            $this->document_type = $data["document_type"];
            $this->last_four = $data["last_four"];
            $this->customer = $data["customer"];
            $this->verified = $data["verified"];
            $this->max_amount = $data["max_amount"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->number;
    }
  
    /**
     * Sets number
     * @param string $number 
     * @return $this
     */
    public function setNumber($number)
    {
        
        $this->number = $number;
        return $this;
    }
    
    /**
     * Gets document_number
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->document_number;
    }
  
    /**
     * Sets document_number
     * @param string $document_number 
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        
        $this->document_number = $document_number;
        return $this;
    }
    
    /**
     * Gets document_type
     * @return string
     */
    public function getDocumentType()
    {
        return $this->document_type;
    }
  
    /**
     * Sets document_type
     * @param string $document_type 
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowed_values = array("CC", "CE", "TI");
        if (!in_array($document_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'document_type', must be one of 'CC', 'CE', 'TI'");
        }
        $this->document_type = $document_type;
        return $this;
    }
    
    /**
     * Gets last_four
     * @return string
     */
    public function getLastFour()
    {
        return $this->last_four;
    }
  
    /**
     * Sets last_four
     * @param string $last_four 
     * @return $this
     */
    public function setLastFour($last_four)
    {
        
        $this->last_four = $last_four;
        return $this;
    }
    
    /**
     * Gets customer
     * @return string
     */
    public function getCustomer()
    {
        return $this->customer;
    }
  
    /**
     * Sets customer
     * @param string $customer 
     * @return $this
     */
    public function setCustomer($customer)
    {
        
        $this->customer = $customer;
        return $this;
    }
    
    /**
     * Gets verified
     * @return bool
     */
    public function getVerified()
    {
        return $this->verified;
    }
  
    /**
     * Sets verified
     * @param bool $verified 
     * @return $this
     */
    public function setVerified($verified)
    {
        
        $this->verified = $verified;
        return $this;
    }
    
    /**
     * Gets max_amount
     * @return Number
     */
    public function getMaxAmount()
    {
        return $this->max_amount;
    }
  
    /**
     * Sets max_amount
     * @param Number $max_amount 
     * @return $this
     */
    public function setMaxAmount($max_amount)
    {
        
        $this->max_amount = $max_amount;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
